
Software Development Life cycle
Stages of Software Development Life cycle

________________________________________________________________________________________________


Waterfall Model:

In a waterfall model, each phase must be completed before the next phase can begin and there is no overlapping in the phases.

The Waterfall model is the earliest SDLC approach that was used for software development.

The waterfall Model illustrates the software development process in a linear sequential flow. This means that any phase in the development process begins only if the previous phase is complete. In this waterfall model, the phases do not overlap.

Waterfall approach was first SDLC Model to be used widely in Software Engineering to ensure success of the project. In "The Waterfall" approach, the whole process of software development is divided into separate phases. In this Waterfall model, typically, the outcome of one phase acts as the input for the next phase sequentially.

Requirement Gathering and analysis − All possible requirements of the system to be developed are captured in this phase and documented in a requirement specification document.

System Design − The requirement specifications from first phase are studied in this phase and the system design is prepared. This system design helps in specifying hardware and system requirements and helps in defining the overall system architecture.

Implementation − With inputs from the system design, the system is first developed in small programs called units, which are integrated in the next phase. Each unit is developed and tested for its functionality, which is referred to as Unit Testing.

Integration and Testing − All the units developed in the implementation phase are integrated into a system after testing of each unit. Post integration the entire system is tested for any faults and failures.

Deployment of system − Once the functional and non-functional testing is done; the product is deployed in the customer environment or released into the market.

Maintenance − There are some issues which come up in the client environment. To fix those issues, patches are released. Also to enhance the product some better versions are released. Maintenance is done to deliver these changes in the customer environment.


All these phases are cascaded to each other in which progress is seen as flowing steadily downwards (like a waterfall) through the phases. The next phase is started only after the defined set of goals are achieved for previous phase and it is signed off, so the name "Waterfall Model". In this model, phases do not overlap.


Waterfall Model - Advantages
	Simple and easy to understand and use
	Easy to manage due to the rigidity of the model.
	Each phase has specific deliverables and a review process.
	Phases are processed and completed one at a time.
	Works well for smaller projects where requirements are very well understood.
	Clearly defined stages.
	Well understood milestones.
	Easy to arrange tasks.
	Process and results are well documented.

Waterfall Model - Disadvantages

	No working software is produced until late during the life cycle.
	High amounts of risk and uncertainty.
	Not a good model for complex and object-oriented projects.
	Poor model for long and ongoing projects.
	Not suitable for the projects where requirements are at a moderate to high risk of changing. 
	So, risk and uncertainty is high with this process model.
	It is difficult to measure progress within stages.
	Cannot accommodate changing requirements.
	Adjusting scope during the life cycle can end a project.

______________________________________________________________________________________

The spiral mode

The spiral model combines the idea of iterative development with the systematic, controlled aspects of the waterfall model. This Spiral model is a combination of iterative development process model and sequential linear development model i.e. the waterfall model with a very high emphasis on risk analysis. It allows incremental releases of the product or incremental refinement through each iteration around the spiral.

Spiral Model - Design
The spiral model has four phases. A software project repeatedly passes through these phases in iterations called Spirals.

1.Identification
This phase starts with gathering the business requirements in the baseline spiral. In the subsequent spirals as the product matures, identification of system requirements, subsystem requirements and unit requirements are all done in this phase.

This phase also includes understanding the system requirements by continuous communication between the customer and the system analyst. At the end of the spiral, the product is deployed in the identified market.

2.Design
The Design phase starts with the conceptual design in the baseline spiral and involves architectural design, logical design of modules, physical product design and the final design in the subsequent spirals.

3.Construct or Build
The Construct phase refers to production of the actual software product at every spiral. In the baseline spiral, when the product is just thought of and the design is being developed a POC (Proof of Concept) is developed in this phase to get customer feedback.

Then in the subsequent spirals with higher clarity on requirements and design details a working model of the software called build is produced with a version number. These builds are sent to the customer for feedback.

4.Evaluation and Risk Analysis
Risk Analysis includes identifying, estimating and monitoring the technical feasibility and management risks, such as schedule slippage and cost overrun. After testing the build, at the end of first iteration, the customer evaluates the software and provides feedback.


Spiral Model Application
The Spiral Model is widely used in the software industry as it is in sync with the natural development process of any product, i.e. learning with maturity which involves minimum risk for the customer as well as the development firms.

The following pointers explain the typical uses of a Spiral Model −

When there is a budget constraint and risk evaluation is important.
For medium to high-risk projects.
Long-term project commitment because of potential changes to economic priorities as the requirements change with time.
Customer is not sure of their requirements which is usually the case.
Requirements are complex and need evaluation to get clarity.
New product line which should be released in phases to get enough customer feedback.
Significant changes are expected in the product during the development cycle.


Spiral Model - Pros and Cons
The advantages of the Spiral SDLC Model are as follows −
	Changing requirements can be accommodated.
	Allows extensive use of prototypes.
	Requirements can be captured more accurately.
	Users see the system early.
	Development can be divided into smaller parts and the risky parts can be developed earlier which 	helps in better risk management.

The disadvantages of the Spiral SDLC Model are as follows −
	Management is more complex.
	End of the project may not be known early.
	Not suitable for small or low risk projects and could be expensive for small projects.
	Process is complex
	Spiral may go on indefinitely.
	Large number of intermediate stages requires excessive documentation.

________________________________________________________________________________________________




1.Planning
   Problem Definition
   Actors of System
   System Boundry
   
   SRS Document
   Software Requirement Specification
 
   Functional Requirements:
	1.Product Catalog 
	2.Shopping Cart
	3.OrderProcessing
	4.Payment Processing
	5.Delivery (Shipment)
	6.Social Media Integration
	7.AI Enablesd services
	8.CRM
	
   Non Functional Requirements
Security:
	Registered customer will be allowed to place an order.
	Each stakeholder ( Customer, Director, Sales and Markting team, Devlivery Vendor) will be able access respective functionalities 	based on  trusted connection with valid credentials
	All Ecommerce Bussines Transactions will be handled using Secure Connection.
	All stakeholders will be automatically logged off because of inactiveness.
	System should be protected using firewall. Secure Access incomming rules and confidential internal sharing outgoing rules will 	configured across firewall maintained at Production .
	Distributed logic of system which is going to be deployed over multiple servers , will have secure communication protocol applied for 	faster data transfer
	Sensitive data will be transported back and forth using proper encryption technique.


Reliability:
	Regular databackup would be taken using incremental and granual way.
	During peak hours backup and restore process will not be carried out.
	Each automated business operation will be handled using reliable transation.

Availability:
	uptime:onlineshopping application is always acessbile continously ( 24 hours, 7 days, 365 days) 
	avability:( 99.99%)
	
Maintainability:
	onlineshopping system should be designed and developed using modular way. Modules of onlineshopping system should be deployed to sepecific servers sothat system would be easily maintained wihout distrubing other modules.
Use professional ready made servers for deploying online shopping system . Sothat  IT team will be able to concentrate for maintaining online shopping system and not web servers, application server s and database server


Portability:
online shopping system should be deployed on any platform (Windows, Linux, Mac Os).
Online shopping system sould contain consistent User interface ,sothat it can be accessed from any browser, any device
(desktop computer, hand held devices, any other existing Web Application).
Appliaction could be migrated on any other servers easily


2.Analysis



3.Design
	Database Design

	Object Oriented Design
	
4.Development
5.Testing
6.Deployment
7.Support (Maintainance)





